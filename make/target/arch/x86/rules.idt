# rules.idt - build system

#
# Copyright (c) 2013-2014 Wind River Systems, Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1) Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2) Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3) Neither the name of Wind River Systems nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

include ${vMAKE}/target/toolchain/${vTOOL}/arch/${vARCH}/rules.idt

################################################################################
# define steps to generate and include static IDT
#
# Set a physical address to the intList section
# Linker places intList to a separate program header in the elf
# file. Then intList gets marked as NOLOAD and then removed.
# This operation creates an empty program header, but the
# program header inherits it's addresses from it's last section --
# intList.
# Most of the bootloaders parse all program headers and first check
# the program header physical address, if it is zero, the virtual
# address is checked. Then a bootloader checks if the address can
# be mapped, even if the length is zero. Thus, the physical address
# of a program header can not be zero.
#

define idtInTxt
	-@$(HOS_Echo) '[${vTOOL}] Creating    [Static IDT]'
	$q$(vOC) -I ${OC_TARGET} -O binary -j intList $@ ${vOUT_DIR}/isrList.bin
	-$q$(HOS_Rename) $@ ${vOUT_DIR}/elf.old
	$q$(HOS_GenIdt) -i ${vOUT_DIR}/isrList.bin -n ${CONFIG_IDT_NUM_VECTORS} -o ${vOUT_DIR}/staticIdt.bin
	$q$(vOC) -I binary -B ${OC_ARCH} -O ${OC_TARGET} --rename-section .data=staticIdt ${vOUT_DIR}/staticIdt.bin ${vOUT_DIR}/staticIdt.o
	-$q$(HOS_DeleteFiles) ${iFINAL_LINKER_CMD}
	-@$(HOS_Echo) '[${vTOOL}] Relinking   [$(notdir $@)]'
	$q${vPP} -DFINAL_LINK ${iLINKER_CMD_OPT} ${iLINKER_CMD_INC} ${LINKER_CMD} -o ${iFINAL_LINKER_CMD}
	$q${vLD} ${-T} ${iFINAL_LINKER_CMD} @$(filter %.${lnk},$^) $(filter %.$o,$^) ${vOUT_DIR}/staticIdt.$o -o $@
	$(call i_noload_${vTOOL},$@,${vOUT_DIR}/elf.tmp)
	$q$(vOC) -R intList ${vOUT_DIR}/elf.tmp $@
	-@$(HOS_DeleteFiles) ${vOUT_DIR}/staticIdt.*
	-@$(HOS_DeleteFiles) ${vOUT_DIR}/isrList.*
	-@$(HOS_DeleteFiles) ${vOUT_DIR}/elf.old
	-@$(HOS_DeleteFiles) ${vOUT_DIR}/elf.tmp

endef

