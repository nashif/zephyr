
/**
@page Requirements
@tableofcontents


@section Zephyr_Software_Requirements_1 Zephyr Software Requirements

@subsection Hardware_Architecture_Interface_1 Hardware Architecture Interface

@subsubsection ZEP-8 ZEP-8: Atomic Operations
@details The Zephyr RTOS shall provide an interface functionality to access memory while ensuring mutual exclusion. Note: Implementation by atomic variables and accessing them by APIs.

@param TYPE Functional

@subsubsection ZEP-9 ZEP-9: Thread Context Switching
@details The Zephyr RTOS shall provide a mechanism for context switching between threads.

@param TYPE Functional

@subsubsection ZEP-10 ZEP-10: Software Exceptions
@details The Zephyr RTOS shall provide an interface to implement software exceptions.

@param TYPE Functional

@subsubsection ZEP-11 ZEP-11: Processor Mode Support
@details The Zephyr RTOS shall provide an interface for managing processor modes.

@param TYPE Functional


@subsection C_Library_1 C Library

@subsubsection ZEP-12 ZEP-12: Formatted output
@details The Zephyr RTOS shall support formatted output.

@param TYPE Functional

@subsubsection ZEP-13 ZEP-13: Floating Point Math Support
@details The Zephyr RTOS shall support floating point math libraries for processors where floating point is available.

@param TYPE Functional

@subsubsection ZEP-14 ZEP-14: Boolean Primitives Support
@details The Zephyr RTOS shall support boolean primitives.

@param TYPE Functional

@subsubsection ZEP-15 ZEP-15: Standard Unix time interface
@details The Zephyr RTOS shall support the standard UNIX time interface.

@param TYPE Functional

@subsubsection ZEP-16 ZEP-16: Strings support
@details The Zephyr RTOS shall support an interface to manage strings.

@param TYPE Functional

@subsubsection ZEP-17 ZEP-17: Moving/copying regions of memory
@details The Zephyr RTOS shall support an interface to move contents between regions of memory.

@param TYPE Functional

@subsubsection ZEP-18 ZEP-18: I/O based interface
@details The Zephyr RTOS shall support a file i/O based interface for driver communication.

@param TYPE Functional

@subsubsection ZEP-19 ZEP-19: C99 integer types
@details The Zephyr RTOS shall support standard C99 integer types.

@param TYPE Functional

@subsubsection ZEP-20 ZEP-20: Standard System Error Numbers (IEEE Std 1003.1-2017)
@details The Zephyr RTOS shall support standard system error numbers as defined by IEEE Std 1003.1-2017.

@param TYPE Functional

@subsubsection ZEP-21 ZEP-21: Document set of Zephyr OS required C library functions in Safety Manual
@details The set of C Library functions required by Zephyr needs to be documented in the Zephyr Safety Manual.

@param TYPE Functional

@subsubsection ZEP-22 ZEP-22: Support external C libraries documentation in Zephyr Safety Manual
@details The Zephyr Safety Manual needs to specify how to configure the support of external C Libraries.

@param TYPE Functional


@subsection Device_Driver_API_1 Device Driver API

@subsubsection ZEP-45 ZEP-45: Device Driver Abstraction
@details The Zephyr RTOS shall provide abstraction of device drivers with common functionalities as an intermediate interface between applications and device drivers, where such interface is implemented by individual device drivers.

Proposal for replacement: Zephyr shall provide an interface between application and individual device drivers to provide an abstraction of device drivers with common functionalities.

@param TYPE Functional

@subsubsection ZEP-46 ZEP-46: Expose kernel to hardware interrupts
@details The Zephyr RTOS shall provide an interface for managing a defined set of hardware exceptions (including interrupts) across all systems.

@param TYPE Functional


@subsection Exception_and_Error_Handling_1 Exception and Error Handling

@subsubsection ZEP-47 ZEP-47: Fatal Exception Error Handler
@details The Zephyr RTOS shall provide default handlers for exceptions.

@param TYPE Functional

@subsubsection ZEP-48 ZEP-48: Default handler for fatal errors
@details The Zephyr RTOS shall provide default handlers for fatal errors that do not have a dedicated handler.

@param TYPE Functional

@subsubsection ZEP-49 ZEP-49: Assigning a specific handler
@details The Zephyr RTOS shall provide an interface to assign a specific handler with an exception.

@param TYPE Functional

@subsubsection ZEP-50 ZEP-50: Assigning a specific handler (2)
@details The Zephyr RTOS shall provide an interface to assign a specific handler for a fatal error.

@param TYPE Functional


@subsection File_System_1 File System

@subsubsection ZEP-51 ZEP-51: Create file
@details Zephyr shall provide file create capabilities for files on the file system.

@param TYPE Functional

@subsubsection ZEP-52 ZEP-52: Open files
@details Zephyr shall provide file open capabilities for files on the file system.

@param TYPE Functional

@subsubsection ZEP-53 ZEP-53: Read files
@details Zephyr shall provide read access to files in the file system.

@param TYPE Functional

@subsubsection ZEP-54 ZEP-54: Write to files
@details Zephyr shall provide write access to the files in the file system.

@param TYPE Functional

@subsubsection ZEP-55 ZEP-55: Close file
@details Zephyr shall provide file close capabilities for files on the file system.

@param TYPE Functional

@subsubsection ZEP-56 ZEP-56: Move file
@details Zephyr shall provide the capability to move files on the file system.

@param TYPE Functional

@subsubsection ZEP-57 ZEP-57: Delete file
@details Zephyr shall provide file delete capabilities for files on the file system.

@param TYPE Functional


@subsection Interrupts_1 Interrupts

@subsubsection ZEP-58 ZEP-58: Service routine for handling interrupts (ISR)
@details The Zephyr RTOS shall provide support a service routine for handling interrupts (ISR).

@param TYPE Functional

@subsubsection ZEP-59 ZEP-59: Multi-level interrupts
@details The Zephyr RTOS shall support multi-level preemptive interrupt priorities, when supported by hardware. Note: detailed analysis to demonstrate non interference will be needed here.

@param TYPE Functional

@subsubsection ZEP-60 ZEP-60: Associating application code with interrupts
@details The Zephyr RTOS shall provide an interface for associating application code with specific interrupts. (CLARIFY: Can it be a deferred procedure call at interrupt context? Would be different requirement)

@param TYPE Functional

@subsubsection ZEP-61 ZEP-61: Enabling interrupts
@details The Zephyr RTOS shall provide mechanisms to enable interrupts.

@param TYPE Functional

@subsubsection ZEP-62 ZEP-62: Disabling interrupts
@details The Zephyr RTOS shall provide mechanisms to disable interrupts.

@param TYPE Functional


@subsection Logging_1 Logging

@subsubsection ZEP-63 ZEP-63: Dedicated Logging Thread Support
@details The Zephyr RTOS shall support isolation of logging from other functionality.

@param TYPE Functional

@subsubsection ZEP-64 ZEP-64: Logs available for post processing
@details The Zephyr RTOS logging shall produce logs that are capable of being post processed.

@param TYPE Functional

@subsubsection ZEP-65 ZEP-65: Formatting log messages
@details The Zephyr RTOS logging shall support formatting of log messages to enable filtering.

@param TYPE Functional

@subsubsection ZEP-66 ZEP-66: Logging Filtering Support
@details The Zephyr RTOS logging system shall support filtering based on severity level.

@param TYPE Functional

@subsubsection ZEP-67 ZEP-67: Multiple Backend Logging Support
@details The Zephyr RTOS shall support logging messages to multiple system resources.

@param TYPE Functional

@subsubsection ZEP-68 ZEP-68: Deferred Logging Support
@details The Zephyr RTOS shall support deferred logging (TODO: need more detail about the constraints and limits on what can be deferred).

@param TYPE Functional


@subsection Memory_Protection_1 Memory Protection

@subsubsection ZEP-69 ZEP-69: Memory Protection
@details The Zephyr RTOS shall support memory protection features to isolate a thread's memory region.

@param TYPE Functional

@subsubsection ZEP-70 ZEP-70: Granting access to kernel objects
@details The Zephyr RTOS shall provide a mechanism to grant user threads access to kernel objects.

@param TYPE Functional

@subsubsection ZEP-71 ZEP-71: Separation between user and kernel threads for memory access
@details The Zephyr RTOS shall be able to differentiate between user threads and kernel threads for memory access.

@param TYPE Functional

@subsubsection ZEP-72 ZEP-72: Safely handle unimplemented calls or invalid system calls
@details The Zephyr RTOS shall have a defined behaviour when an invocation of an unimplemented system call is made.

@param TYPE Functional

@subsubsection ZEP-73 ZEP-73: Response to invalid system call IDs
@details The Zephyr RTOS shall have a defined behaviour when an invalid system call ID is used.

@param TYPE Functional

@subsubsection ZEP-74 ZEP-74: Prevent user threads creating higher priority threads
@details The Zephyr RTOS shall prevent user threads from creating new threads that are higher priority than the caller.

@param TYPE Functional

@subsubsection ZEP-75 ZEP-75: Revoking threads permissions on a kernel object
@details The Zephyr RTOS shall support revoking permission to a kernel object. User mode threads may only revoke their own access to an object.

@param TYPE Functional

@subsubsection ZEP-76 ZEP-76: Prevent user threads creating supervisor threads
@details The Zephyr RTOS shall prevent user threads from creating kernel threads.

@param TYPE Functional

@subsubsection ZEP-77 ZEP-77: Reduced Privilege Level Threads
@details The Zephyr RTOS shall allow the creation of threads that run in reduced privilege level.

@param TYPE Functional

@subsubsection ZEP-78 ZEP-78: User Mode Threads Performing Privileged Operations
@details The Zephyr RTOS shall provide system calls to allow user mode threads to perform privileged operations.

@param TYPE Functional

@subsubsection ZEP-79 ZEP-79: User mode handling of detected stack overflow
@details The Zephyr RTOS shall support a defined mechanism for user mode handling a of detected stack overflow.

@param TYPE Functional

@subsubsection ZEP-80 ZEP-80: Stack Overflow Detection
@details The Zephyr RTOS shall support detection of stack overflows.

@param TYPE Functional

@subsubsection ZEP-81 ZEP-81: Boot Time Memory Access Policy
@details The Zephyr RTOS shall support configurable access to memory during boot time.

@param TYPE Functional

@subsubsection ZEP-82 ZEP-82: System Call Handler Functions
@details The Zephyr RTOS shall provide helper functions for system call handler functions to validate the inputs passed in from user mode before invoking the implementation function to protect the kernel.

@param TYPE Functional

@subsubsection ZEP-83 ZEP-83: System Call C strings in user mode
@details The Zephyr RTOS shall support system calls to be able to safely accept C strings passed in from user mode.

@param TYPE Functional

@subsubsection ZEP-84 ZEP-84: Tracking kernel objects in used by user mode threads
@details The Zephyr RTOS shall track kernel objects that are used by user mode threads.

Note: this means Zephyr shall track the resources used by the user mode thread (associate this with a user story).

@param TYPE Functional

@subsubsection ZEP-85 ZEP-85: Granting threads access to specific memory
@details The Zephyr RTOS shall have an interface to request access to specific memory after initial allocation.

@param TYPE Functional

@subsubsection ZEP-86 ZEP-86: Assigning memory pools to act as a thread resource pool
@details The Zephyr RTOS shall support assigning a memory pool to act as that thread's resource pool.

@param TYPE Functional


@subsection Memory_Objects_1 Memory Objects

@subsubsection ZEP-87 ZEP-87: Dynamic Memory Allocation
@details The Zephyr RTOS shall allow threads to dynamically allocate variable-sized memory regions from a specified range of memory.

@param TYPE Functional

@subsubsection ZEP-88 ZEP-88: Memory Slab Object
@details The Zephyr RTOS shall allow threads to dynamically allocate fixed-sized memory regions from a specified range of memory.

@param TYPE Functional


@subsection Data_Passing_1 Data Passing

@subsubsection ZEP-89 ZEP-89: Traditional FIFO Queue
@details The Zephyr RTOS shall provide a kernel object that implements a traditional first in, first out (FIFO) queue, allowing threads and ISRs to add and remove a limited number of 32-bit data values.

@param TYPE Functional

@subsubsection ZEP-90 ZEP-90: Traditional LIFO queue
@details The Zephyr RTOS shall provide a kernel object that implements a traditional last in, first out (LIFO) queue, allowing threads and ISRs to add and remove a limited number of 32-bit data values.

@param TYPE Functional


@subsection Mutex_1 Mutex

@subsubsection ZEP-91 ZEP-91: Mutex Kernel Object
@details The Zephyr RTOS shall support resource synchronization. (Note synchronization can be for memory access, and mutex may be one implementation, but not the only one).

@param TYPE Functional


@subsection Semaphore_1 Semaphore

@subsubsection ZEP-12001 ZEP-12001: Counting Semaphore Definition At Compile Time
@details The Zephyr RTOS shall provide a mechanism to define and initialize a semaphore at compile time.

@param TYPE Functional

@subsubsection ZEP-12002 ZEP-12002: Counting Semaphore Definition At Run Time
@details The Zephyr RTOS shall provide a mechanism to define and initialize a semaphore at runtime.

@param TYPE Functional

@subsubsection ZEP-12003 ZEP-12003: Maximum limit of a semaphore
@details The Zephyr RTOS shall define the maximum limit of a semaphore when the semaphore is used for counting purposes and does not have an explicit limit.

@param TYPE Functional

@subsubsection ZEP-12004 ZEP-12004: Initialialization with maximum count value
@details When initializing a counting semaphore, the maximum permitted count a semaphore
can have shall be set.

@param TYPE Functional

@subsubsection ZEP-12005 ZEP-12005: Initialialization with initial semaphore value
@details When initializing a counting semaphore, the initial semaphore value shall be set.

@param TYPE Functional

@subsubsection ZEP-12006 ZEP-12006: Semaphore acquisition mechanism
@details The Zephyr RTOS shall provide a mechanism allowing threads to acquire a semaphore.

@param TYPE Functional

@subsubsection ZEP-12007 ZEP-12007: Semaphore acquisition with count greater than zero
@details If the semaphore's count is greater than zero, the requesting thread shall acquire
the semaphore and decrement its count.

@param TYPE Functional

@subsubsection ZEP-12008 ZEP-12008: Semaphore acquisition with zero count
@details If the semaphore's count is zero, the requesting thread shall be blocked until the semaphore is released by another thread.

@param TYPE Functional

@subsubsection ZEP-12009 ZEP-12009: Semaphore acquisition timeout
@details When attempting to acquire a semaphore, the Zephyr RTOS shall accept options that specify timeout periods, allowing threads to set a maximum wait time for semaphore acquisition.

@param TYPE Functional

@subsubsection ZEP-12010 ZEP-12010: Semaphore acquisition timeout error handling
@details When attempting to acquire a semaphore, where the semaphore is not acquired within the
specified time, the Zephyr RTOS shall return an error indicating a timeout.

@param TYPE Functional

@subsubsection ZEP-12011 ZEP-12011: Semaphore acquisition no wait error handling
@details When attempting to acquire a semaphore, where the current count is zero and no waiting time was provided, the Zephyr RTOS
shall return an error indicating the semaphore is busy.

@param TYPE Functional

@subsubsection ZEP-12012 ZEP-12012: Semaphore release
@details The Zephyr RTOS shall provide a mechanism allowing threads to release a semaphore.

@param TYPE Functional

@subsubsection ZEP-12013 ZEP-12013: Semaphore release
@details The Zephyr RTOS shall increment the semaphore's count upon release.

@param TYPE Functional

@subsubsection ZEP-12014 ZEP-12014: Semaphore release with priority inheritance
@details If there are threads waiting on the semaphore, the highest-priority waiting thread
shall be unblocked and acquire the semaphore.

@param TYPE Functional

@subsubsection ZEP-12015 ZEP-12015: Checking semaphore count
@details The Zephyr RTOS shall provide a mechanism for threads to check the current count of a semaphore without acquiring it.

@param TYPE Functional

@subsubsection ZEP-12023 ZEP-12023: Semaphore reset
@details The Zephyr RTOS shall provide a mechanism that resets the semaphore count to zero.

@param TYPE Functional

@subsubsection ZEP-12024 ZEP-12024: Semaphore acquisitions abort after reset
@details When a semaphore is reset, the Zephyr RTOS shall abort all existing acquisitions
of the semaphore returning a resource contention error code.

@param TYPE Functional

@subsubsection ZEP-12025 ZEP-12025: Semaphore Initialization Option Validation
@details When initializing a counting semaphore, where the maximum permitted count of a semaphore is invalid,
the Zephyr RTOS shall return an error indicating invalid values.

@param TYPE Functional


@subsection Power_Management_1 Power Management

@subsubsection ZEP-92 ZEP-92: Power State Control
@details The Zephyr RTOS shall provide control over changes to system power states.

@param TYPE Functional

@subsubsection ZEP-93 ZEP-93: Power Management
@details TBD

@param TYPE Functional

@subsubsection ZEP-94 ZEP-94: Notification of changes to system power states
@details The Zephyr RTOS shall provide notification of changes to system power states.

@param TYPE Functional


@subsection Thread_Communication_1 Thread Communication

@subsubsection ZEP-96 ZEP-96: Exchanging data between threads
@details The Zephyr RTOS shall provide a mechanism for exchanging data between threads.

@param TYPE Functional

@subsubsection ZEP-97 ZEP-97: Waiting for results during communication
@details The Zephyr RTOS shall provide mechanisms to enable waiting for results during communication between threads. (NOTE:  waiting for results is really bad and dangerous, want to avoid if at all possible).

@param TYPE Functional

@subsubsection ZEP-100 ZEP-100: Poll Operation Support
@details The Zephyr RTOS shall support a poll operation which enables waiting concurrently for any one of multiple conditions to be fulfilled.

@param TYPE Functional

@subsubsection ZEP-101 ZEP-101: Pipe Communication Primitive
@details The Zephyr RTOS shall provide a communication primitive that allows a thread to transfer a block of
data to another thread.

@param TYPE Functional

@subsubsection ZEP-102 ZEP-102: Message Queue
@details The Zephyr RTOS shall provide a a communication primitive that allow threads and ISRs to asynchronously exchange fixed-size data items.

@param TYPE Functional

@subsubsection ZEP-103 ZEP-103: Mailbox Kernel Primitive
@details The Zephyr RTOS shall provide a communication primitive that allows threads to exchange messages of varying sizes asynchronously or synchronously.

@param TYPE Functional


@subsection Multi_Core_1 Multi Core

@subsubsection ZEP-104 ZEP-104: Support operation on more than one CPU
@details The Zephyr RTOS shall support operation on more than one physical CPU sharing the same kernel state.

@param TYPE Functional

@subsubsection ZEP-105 ZEP-105: Running threads on specific CPUs
@details The Zephyr RTOS shall provide an interface for running threads on specific sets of CPUs ( default is 1 CPU).

@param TYPE Functional

@subsubsection ZEP-106 ZEP-106: Exclusion between physical CPUs
@details The Zephyr RTOS shall provide an interface for mutual exclusion between multiple physical CPUs.

@param TYPE Functional


@subsection Thread_Scheduling_1 Thread Scheduling

@subsubsection ZEP-112 ZEP-112: Scheduling a thread based on an event
@details The Zephyr RTOS shall provide an interface to schedule a thread based on an event.

@param TYPE Functional

@subsubsection ZEP-114 ZEP-114: Deadline Scheduling Priorities
@details The Zephyr RTOS shall organize running threads by earliest deadline first priority.

@param TYPE Functional

@subsubsection ZEP-115 ZEP-115: Work Queue utility capable of running preemptible work items
@details The Zephyr RTOS shall provide a thread-pooled work queue utility capable of running preemptible work items with specific scheduler priorities.

@param TYPE Functional

@subsubsection ZEP-24 ZEP-24: Run user supplied functions in-order in a separate thread(s)
@details The Zephyr RTOS shall provide an interface for running user-supplied functions.

@param TYPE Functional

@subsubsection ZEP-116 ZEP-116: Organize running threads into a fixed list
@details The Zephyr RTOS shall organize running threads into a fixed list of numeric priorities.

@param TYPE Functional

@subsubsection ZEP-117 ZEP-117: Preemption support
@details The Zephyr RTOS shall support preemption of a running thread by a higher priority thread.

@param TYPE Functional

@subsubsection ZEP-118 ZEP-118: Un-preemptible thread priorities
@details The Zephyr RTOS shall support thread priorities which cannot be preempted by other user threads.

@param TYPE Functional

@subsubsection ZEP-119 ZEP-119: Time sharing of CPU resources
@details The Zephyr RTOS shall support time sharing of CPU resources among threads of the same priority.

@param TYPE Functional


@subsection Threads_1 Threads

@subsubsection ZEP-23 ZEP-23: Creating threads
@details The Zephyr RTOS shall provide an interface to create (start) a thread.

@param TYPE Functional

@subsubsection ZEP-107 ZEP-107: Setting thread priority
@details The Zephyr RTOS shall provide an interface to set a thread's priority.

@param TYPE Functional

@subsubsection ZEP-108 ZEP-108: Suspending a thread
@details The Zephyr RTOS shall provide an interface to suspend a thread.

@param TYPE Functional

@subsubsection ZEP-109 ZEP-109: Resuming a suspended thread
@details The Zephyr RTOS shall provide an interface to resume a suspended thread.

@param TYPE Functional

@subsubsection ZEP-110 ZEP-110: Resuming a suspended thread after a timeout
@details The Zephyr RTOS shall provide an interface to resume a suspended thread after a timeout.

@param TYPE Functional

@subsubsection ZEP-111 ZEP-111: Deleting a thread
@details The Zephyr RTOS shall provide an interface to delete (end) a thread.

@param TYPE Functional

@subsubsection ZEP-124 ZEP-124: Thread states
@details Threads shall have different states to fulfill the Life-cycle of a thread

@param TYPE Functional

@subsubsection ZEP-98 ZEP-98: Thread stack objects
@details Every Thread shall have it's own stack.

@param TYPE Functional

@subsubsection ZEP-25 ZEP-25: Thread privileges
@details The Zephyr RTOS shall provide an interface to create threads with defined privilege.

@param TYPE Functional

@subsubsection ZEP-26 ZEP-26: Scheduling multiple threads
@details The Zephyr RTOS shall provide an interface to schedule multiple threads.

@param TYPE Functional

@subsubsection ZEP-125 ZEP-125: Thread Options
@details The Zephyr RTOS shall support a set of thread options.

@param TYPE Functional

@subsubsection ZEP-126 ZEP-126: Thread Custom Data
@details Every thread shall have a custom data area.

@param TYPE Functional


@subsection Timers_1 Timers

@subsubsection ZEP-27 ZEP-27: Kernel Clock
@details The Zephyr RTOS shall provide a interface for checking the current value of the real-time clock.

@param TYPE Functional

@subsubsection ZEP-28 ZEP-28: Call functions in interrupt context
@details The Zephyr RTOS shall provide an interface to schedule user mode call back function triggered by a real time clock value.

@param TYPE Functional


@subsection Tracing_1 Tracing

@subsubsection ZEP-29 ZEP-29: Initializing a trace
@details Zephyr shall provide an interface to initialize a trace.

@param TYPE Functional

@subsubsection ZEP-30 ZEP-30: Triggering a trace
@details Zephyr shall provide an interface to trigger a trace.

@param TYPE Functional

@subsubsection ZEP-31 ZEP-31: Dumping trace results
@details Zephyr shall provide an interface to dump results from a trace.

@param TYPE Functional

@subsubsection ZEP-32 ZEP-32: Removing trace data
@details Zephyr shall provide an interface to remove trace data.

@param TYPE Functional

@subsubsection ZEP-33 ZEP-33: Tracing Object  Identification
@details Zephyr shall provide an interface to identify the objects being traced.

@param TYPE Functional

@subsubsection ZEP-34 ZEP-34: Tracing Non-Interference
@details Zepyhr shall prevent the tracing functionality from interfering with normal operations.

@param TYPE Functional


@section Zephyr_System_Requirements_2 Zephyr System Requirements

@subsection Hardware_Architecture_Interface_2 Hardware Architecture Interface

@subsubsection ZEP-1 ZEP-1: Architecture Layer Interface
@details The Zephyr RTOS shall provide a framework to communicate with a set of hardware architectural services.

@param TYPE High Level

@subsubsection ZEP-3 ZEP-3: Support multiprocessor management
@details The Zephyr RTOS shall support symmetric multiprocessing on multiple cores.

@param TYPE High Level


@subsection C_Library_2 C Library

@subsubsection ZEP-2 ZEP-2: Support Subset of Standard C Library
@details The Zephyr RTOS shall support a subset of the standard C library.

@param TYPE High Level


@subsection Device_Drivers_2 Device Drivers

@subsubsection ZEP-36 ZEP-36: Device Driver Abstraction
@details The Zephyr RTOS shall provide a framework for managing device drivers and peripherals.

@param TYPE High Level


@subsection Exception_and_Error_Handling_2 Exception and Error Handling

@subsubsection ZEP-37 ZEP-37: Fatal error and exception handling
@details The Zephyr RTOS shall provide a framework for error and exception handling.

@param TYPE High Level


@subsection File_Systems_2 File Systems

@subsubsection ZEP-38 ZEP-38: Common File system operation support
@details The Zephyr RTOS shall provide a framework for managing file system access.

@param TYPE High Level


@subsection Interrupts_2 Interrupts

@subsubsection ZEP-39 ZEP-39: Interrupt Service Routine
@details The Zephyr RTOS shall provide a framework for interrupt management.

@param TYPE High Level


@subsection Logging_2 Logging

@subsubsection ZEP-40 ZEP-40: Logging
@details The Zephyr RTOS shall provide a framework for logging events.

@param TYPE High Level


@subsection Memory_Management_2 Memory Management

@subsubsection ZEP-41 ZEP-41: Memory Management framework
@details The Zephyr RTOS shall support a memory management framework.

@param TYPE High Level


@subsection Power_Management_2 Power Management

@subsubsection ZEP-42 ZEP-42: Power Management
@details The Zephyr RTOS shall provide an interface to control hardware power states.

@param TYPE High Level


@subsection SMP_and_Multi_core_2 SMP and Multi core

@subsubsection ZEP-44 ZEP-44: Multiple CPU scheduling
@details The Zephyr RTOS shall support scheduling of threads on multiple hardware CPUs.

@param TYPE High Level

@subsubsection ZEP-4 ZEP-4: Scheduling
@details The Zephyr RTOS shall provide an interface to assign a thread to a specific CPU.

@param TYPE High Level


@subsection Mutex_2 Mutex

@subsubsection ZEP-43 ZEP-43: Mutex
@details The Zephyr RTOS shall provide an interface for managing communication between threads.

@param TYPE High Level


@subsection Semaphore_2 Semaphore

@subsubsection ZEP-99 ZEP-99: Counting Semaphore
@details The system shall implement a semaphore synchronization primitive for coordinating access to shared resources among multiple threads.

@param TYPE High Level


@subsection Threads_2 Threads

@subsubsection ZEP-123 ZEP-123: Thread support
@details The Zephyr RTOS shall support threads.

@param TYPE High Level

@subsubsection ZEP-5 ZEP-5: Thread management
@details The Zephyr RTOS shall provide a framework for managing multiple threads of execution.

@param TYPE High Level

@subsubsection ZEP-122 ZEP-122: Thread priority
@details Threads shall have a priority.

@param TYPE High Level


@subsection Timers_2 Timers

@subsubsection ZEP-6 ZEP-6: Timers
@details The Zephyr RTOS shall provide a framework for managing time-based events.

@param TYPE High Level


@subsection Tracing_2 Tracing

@subsubsection ZEP-7 ZEP-7: Tracing
@details Zepyhr shall provide a framework mechanism for tracing low level system operations  (NOTE: system calls, interrupts, kernel calls, thread, synchronization, etc.).

@param TYPE High Level


*/
