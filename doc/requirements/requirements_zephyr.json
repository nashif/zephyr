{
    "_COMMENT": "Fields with _ are metadata. Fields without _ are the actual document/section/requirement/other content.",
    "DOCUMENTS": [
        {
            "TITLE": "Zephyr Software Requirements",
            "REQ_PREFIX": "ZEP-",
            "GRAMMAR": {
                "ELEMENTS": [
                    {
                        "NODE_TYPE": "REQUIREMENT",
                        "FIELDS": [
                            {
                                "TITLE": "UID",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "STATUS",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "TYPE",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "COMPONENT",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "TITLE",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "STATEMENT",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "USER_STORY",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "REVIEW_COMMENT",
                                "REQUIRED": false,
                                "TYPE": "String"
                            }
                        ],
                        "RELATIONS": [
                            {
                                "TYPE": "Parent"
                            }
                        ]
                    }
                ]
            },
            "_OPTIONS": {},
            "NODES": [
                {
                    "_TOC": "1",
                    "TYPE": "SECTION",
                    "TITLE": "Hardware Architecture Interface",
                    "NODES": [
                        {
                            "_TOC": "1.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-8",
                            "STATUS": "Draft",
                            "COMPONENT": "Hardware Architecture Interface",
                            "TITLE": "Atomic Operations",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface functionality to access memory while ensuring mutual exclusion. Note: Implementation by atomic variables and accessing them by APIs.",
                            "USER_STORY": "As a Zephyr RTOS user I want to read from or write into a memory areas without being disturbed by other threads or ISRs.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-1"
                                }
                            ]
                        },
                        {
                            "_TOC": "1.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-9",
                            "STATUS": "Draft",
                            "COMPONENT": "Hardware Architecture Interface",
                            "TITLE": "Thread Context Switching",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism for context switching between threads.",
                            "USER_STORY": "As a Zephyr RTOS user I want to execute code concurrently in one or more threads and when interrupted at a code location in a thread, to continue at the very same location.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-1"
                                }
                            ]
                        },
                        {
                            "_TOC": "1.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-10",
                            "STATUS": "Draft",
                            "COMPONENT": "Hardware Architecture Interface",
                            "TITLE": "Software Exceptions",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to implement software exceptions.",
                            "USER_STORY": "As a Zephyr RTOS user I want to catch any software exception and handle it according to my application needs.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-1"
                                }
                            ]
                        },
                        {
                            "_TOC": "1.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-11",
                            "STATUS": "Draft",
                            "COMPONENT": "Hardware Architecture Interface",
                            "TITLE": "Processor Mode Support",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface for managing processor modes.",
                            "USER_STORY": "If MCU power state was meant here:\nAs a Zephyr RTOS user I want to control the MCU's power saving mode such e.g. operation, sleep, deep sleep or similar as supported by the selected MCU.",
                            "REVIEW_COMMENT": "What is life cycle - power on, standby, power off?  or ????\n\nClarification: Starting and Stopping, and putting it into Stand-By Mode (whatever the processor supports)",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-1"
                                }
                            ]
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "2",
                    "TYPE": "SECTION",
                    "TITLE": "C library",
                    "NODES": [
                        {
                            "_TOC": "2.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-12",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Formatted output",
                            "STATEMENT": "The Zephyr RTOS shall support formatted output.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to printf with various output formats.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-13",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Floating Point Math Support",
                            "STATEMENT": "The Zephyr RTOS shall support floating point math libraries for processors where floating point is available.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to calculate with floating point numbers.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-14",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Boolean Primitives Support",
                            "STATEMENT": "The Zephyr RTOS shall support boolean primitives.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to work with boolean values and logic.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-15",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Standard Unix time interface",
                            "STATEMENT": "The Zephyr RTOS shall support the standard UNIX time interface.",
                            "USER_STORY": "As a Zephyr User, I want to be able to use system time.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-16",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Strings support",
                            "STATEMENT": "The Zephyr RTOS shall support an interface to manage strings.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to manipulate text strings.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-17",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Moving/copying regions of memory",
                            "STATEMENT": "The Zephyr RTOS shall support an interface to move contents between regions of memory.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to copy the memory contents to different addresses.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.7",
                            "TYPE": "Functional",
                            "UID": "ZEP-18",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "I/O based interface",
                            "STATEMENT": "The Zephyr RTOS shall support a file i/O based interface for driver communication.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to use File I/O functions.",
                            "REVIEW_COMMENT": "A wrong C header seems to be included: stdint.h does not have to do with I/O.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.8",
                            "TYPE": "Functional",
                            "UID": "ZEP-19",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "C99 integer types",
                            "STATEMENT": "The Zephyr RTOS shall support standard C99 integer types.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to calculate with C99 Integers.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.9",
                            "TYPE": "Functional",
                            "UID": "ZEP-20",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Standard System Error Numbers (IEEE Std 1003.1-2017)",
                            "STATEMENT": "The Zephyr RTOS shall support standard system error numbers as defined by IEEE Std 1003.1-2017.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to use IEE Std 1003.1-2017 Error Numbers for Interoperability.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.10",
                            "TYPE": "Functional",
                            "UID": "ZEP-21",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Document set of Zephyr OS required C library functions in Safety Manual",
                            "STATEMENT": "The set of C Library functions required by Zephyr needs to be documented in the Zephyr Safety Manual.",
                            "USER_STORY": "As a Zephyr user, I want to know which C library functions are being called by the Zephyr OS safety scope code.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        },
                        {
                            "_TOC": "2.11",
                            "TYPE": "Functional",
                            "UID": "ZEP-22",
                            "STATUS": "Draft",
                            "COMPONENT": "C Library",
                            "TITLE": "Support external C libraries documentation in Zephyr Safety Manual",
                            "STATEMENT": "The Zephyr Safety Manual needs to specify how to configure the support of external C Libraries.",
                            "USER_STORY": "As a Zephyr User, I need to understand how to configure the external C libraries to align with the validation that has been performed.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-2"
                                }
                            ]
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "3",
                    "TYPE": "SECTION",
                    "TITLE": "Device Driver API",
                    "NODES": [
                        {
                            "_TOC": "3.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-45",
                            "STATUS": "Draft",
                            "COMPONENT": "Device Driver API",
                            "TITLE": "Device Driver Abstraction",
                            "STATEMENT": "The Zephyr RTOS shall provide abstraction of device drivers with common functionalities as an intermediate interface between applications and device drivers, where such interface is implemented by individual device drivers.\n\nProposal for replacement: Zephyr shall provide an interface between application and individual device drivers to provide an abstraction of device drivers with common functionalities.",
                            "REVIEW_COMMENT": "What are common functionalities?\n\nClarification: Abstract API drivers, UART. Set of files associated with that. Include drivers. 50+ files. Best place to look at is the documentation (not the files)."
                        },
                        {
                            "_TOC": "3.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-46",
                            "STATUS": "Draft",
                            "COMPONENT": "Device Driver API",
                            "TITLE": "Expose kernel to hardware interrupts",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface for managing a defined set of hardware exceptions (including interrupts) across all systems.",
                            "USER_STORY": "As a Zephyr RTOS user I want hardware exceptions (hardware failures, programming mistakes) to be handled gracefully (no program crashes as far as possible).",
                            "REVIEW_COMMENT": "What does \"system\" mean in this context? Architecture?\n\nNP: Now I think system means HW platform."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "4",
                    "TYPE": "SECTION",
                    "TITLE": "Exception and Error Handling",
                    "NODES": [
                        {
                            "_TOC": "4.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-47",
                            "STATUS": "Draft",
                            "COMPONENT": "Exception and Error Handling",
                            "TITLE": "Fatal Exception Error Handler",
                            "STATEMENT": "The Zephyr RTOS shall provide default handlers for exceptions.",
                            "USER_STORY": "As a Zephyr RTOS user I want exceptions which I did not handle explicitly (by mistake or on purpose) to be caught by a default handler, defined either by Zephyr OS or by myself."
                        },
                        {
                            "_TOC": "4.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-48",
                            "STATUS": "Draft",
                            "COMPONENT": "Exception and Error Handling",
                            "TITLE": "Default handler for fatal errors",
                            "STATEMENT": "The Zephyr RTOS shall provide default handlers for fatal errors that do not have a dedicated handler."
                        },
                        {
                            "_TOC": "4.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-49",
                            "STATUS": "Draft",
                            "COMPONENT": "Exception and Error Handling",
                            "TITLE": "Assigning a specific handler",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to assign a specific handler with an exception."
                        },
                        {
                            "_TOC": "4.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-50",
                            "STATUS": "Draft",
                            "COMPONENT": "Exception and Error Handling",
                            "TITLE": "Assigning a specific handler (2)",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to assign a specific handler for a fatal error."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "5",
                    "TYPE": "SECTION",
                    "TITLE": "System Initialization",
                    "NODES": [],
                    "REQ_PREFIX": "ZEP-",
                    "FREETEXT": "\nTBD\n\n"
                },
                {
                    "_TOC": "6",
                    "TYPE": "SECTION",
                    "TITLE": "File system",
                    "NODES": [
                        {
                            "_TOC": "6.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-51",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Create file",
                            "STATEMENT": "Zephyr shall provide file create capabilities for files on the file system.",
                            "USER_STORY": "As a Zephyr OS user I want to be able to create a new file or overwrite an existing file at the same filesystem location / identifier (e.g. path + name)."
                        },
                        {
                            "_TOC": "6.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-52",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Open files",
                            "STATEMENT": "Zephyr shall provide file open capabilities for files on the file system.",
                            "USER_STORY": "As a Zephyr OS user I want to be able to open a file for writing or reading.\nWhen opened for writing, I want to have exclusive access to the file."
                        },
                        {
                            "_TOC": "6.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-53",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Read files",
                            "STATEMENT": "Zephyr shall provide read access to files in the file system.",
                            "USER_STORY": "As a Zephyr OS user I want to be able to read from an existing file, also while the file is read from multiple and write accessed from one other instances."
                        },
                        {
                            "_TOC": "6.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-54",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Write to files",
                            "STATEMENT": "Zephyr shall provide write access to the files in the file system.",
                            "USER_STORY": "As a Zephyr OS user I want to be able to write to a file either from the beginning of the file or appending at the end."
                        },
                        {
                            "_TOC": "6.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-55",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Close file",
                            "STATEMENT": "Zephyr shall provide file close capabilities for files on the file system.",
                            "USER_STORY": "As a Zephyr OS user I want to be able to close a file after being finished with my file operations, unlocking any access restrictions."
                        },
                        {
                            "_TOC": "6.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-56",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Move file",
                            "STATEMENT": "Zephyr shall provide the capability to move files on the file system."
                        },
                        {
                            "_TOC": "6.7",
                            "TYPE": "Functional",
                            "UID": "ZEP-57",
                            "STATUS": "Draft",
                            "COMPONENT": "File System",
                            "TITLE": "Delete file",
                            "STATEMENT": "Zephyr shall provide file delete capabilities for files on the file system.",
                            "USER_STORY": "As a Zephyr OS user I want to be able to delete an existing file."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "7",
                    "TYPE": "SECTION",
                    "TITLE": "Interrupts",
                    "NODES": [
                        {
                            "_TOC": "7.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-58",
                            "STATUS": "Draft",
                            "COMPONENT": "Interrupts",
                            "TITLE": "Service routine for handling interrupts (ISR)",
                            "STATEMENT": "The Zephyr RTOS shall provide support a service routine for handling interrupts (ISR)."
                        },
                        {
                            "_TOC": "7.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-59",
                            "STATUS": "Draft",
                            "COMPONENT": "Interrupts",
                            "TITLE": "Multi-level interrupts",
                            "STATEMENT": "The Zephyr RTOS shall support multi-level preemptive interrupt priorities, when supported by hardware. Note: detailed analysis to demonstrate non interference will be needed here."
                        },
                        {
                            "_TOC": "7.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-60",
                            "STATUS": "Draft",
                            "COMPONENT": "Interrupts",
                            "TITLE": "Associating application code with interrupts",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface for associating application code with specific interrupts. (CLARIFY: Can it be a deferred procedure call at interrupt context? Would be different requirement)"
                        },
                        {
                            "_TOC": "7.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-61",
                            "STATUS": "Draft",
                            "COMPONENT": "Interrupts",
                            "TITLE": "Enabling interrupts",
                            "STATEMENT": "The Zephyr RTOS shall provide mechanisms to enable interrupts.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to enable each individual and a global interrupt according to my applications needs during program execution."
                        },
                        {
                            "_TOC": "7.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-62",
                            "STATUS": "Draft",
                            "COMPONENT": "Interrupts",
                            "TITLE": "Disabling interrupts",
                            "STATEMENT": "The Zephyr RTOS shall provide mechanisms to disable interrupts.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to disable each individual and a global interrupt according to my applications needs during program execution."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "8",
                    "TYPE": "SECTION",
                    "TITLE": "Logging",
                    "NODES": [
                        {
                            "_TOC": "8.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-63",
                            "STATUS": "Draft",
                            "COMPONENT": "Logging",
                            "TITLE": "Dedicated Logging Thread Support",
                            "STATEMENT": "The Zephyr RTOS shall support isolation of logging from other functionality.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to configure logging of events so the execution of logging activities does have no or only a minimal impact to the timing behaviour of my application."
                        },
                        {
                            "_TOC": "8.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-64",
                            "STATUS": "Draft",
                            "COMPONENT": "Logging",
                            "TITLE": "Logs available for post processing",
                            "STATEMENT": "The Zephyr RTOS logging shall produce logs that are capable of being post processed.",
                            "USER_STORY": "As a Zephyr RTOS user I want the logging information to be stored in a format which allows to be read possibly converted or displayed by COTS tools."
                        },
                        {
                            "_TOC": "8.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-65",
                            "STATUS": "Draft",
                            "COMPONENT": "Logging",
                            "TITLE": "Formatting log messages",
                            "STATEMENT": "The Zephyr RTOS logging shall support formatting of log messages to enable filtering.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able my application to format texts (printf alike) into the log message.",
                            "REVIEW_COMMENT": "Question: formatting in which way? length, colour, tags, etc?"
                        },
                        {
                            "_TOC": "8.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-66",
                            "STATUS": "Draft",
                            "COMPONENT": "Logging",
                            "TITLE": "Logging Filtering Support",
                            "STATEMENT": "The Zephyr RTOS logging system shall support filtering based on severity level.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to distinguish between different severity level for my log messages (e.g. DEBUG, INFO, WARN, ERROR, PANIC).",
                            "REVIEW_COMMENT": "Question: Filtering during runtime or a kconfig option to initially set the filter for logging"
                        },
                        {
                            "_TOC": "8.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-67",
                            "STATUS": "Draft",
                            "COMPONENT": "Logging",
                            "TITLE": "Multiple Backend Logging Support",
                            "STATEMENT": "The Zephyr RTOS shall support logging messages to multiple system resources.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to simultaneously log to different channels which may store / redirect the information on / to different hardware (EEPROM, Flash, FRAM, UART, Ethernet, USB etc.).",
                            "REVIEW_COMMENT": "Question: What kind of backends shall be supported? More than one at a time?   Word choices.... backends/devices/channels/destinations/resources (devices, memory, ....) )"
                        },
                        {
                            "_TOC": "8.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-68",
                            "STATUS": "Draft",
                            "COMPONENT": "Logging",
                            "TITLE": "Deferred Logging Support",
                            "STATEMENT": "The Zephyr RTOS shall support deferred logging (TODO: need more detail about the constraints and limits on what can be deferred).",
                            "USER_STORY": "As a Zephyr RTOS user I want a minimal influence of logging activities to the timing behaviour of my application. Time consuming logging threads shall be done in the background."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "9",
                    "TYPE": "SECTION",
                    "TITLE": "Memory protection",
                    "NODES": [
                        {
                            "_TOC": "9.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-69",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Memory Protection",
                            "STATEMENT": "The Zephyr RTOS shall support memory protection features to isolate a thread's memory region.",
                            "USER_STORY": "As a Zephyr RTOS user I want memory to be allocated and protected to my application threads preventing mistakenly access to foreign memory as far as the hardware allows.",
                            "REVIEW_COMMENT": "Functional it is memory management, but it also strongly relates to the architecture abstraction and memory access"
                        },
                        {
                            "_TOC": "9.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-70",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Granting access to kernel objects",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism to grant user threads access to kernel objects.",
                            "USER_STORY": "As a Zephyr RTOS user I want, from the user space, under certain conditions, access to kernel objects.",
                            "REVIEW_COMMENT": "What are the conditions to a user thread to get access to a kernel object?"
                        },
                        {
                            "_TOC": "9.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-71",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Separation between user and kernel threads for memory access",
                            "STATEMENT": "The Zephyr RTOS shall be able to differentiate between user threads and kernel threads for memory access.",
                            "USER_STORY": "As a Zephyr RTOS user I want, from the kernel space, unconditioned access to kernel objects."
                        },
                        {
                            "_TOC": "9.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-72",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Safely handle unimplemented calls or invalid system calls",
                            "STATEMENT": "The Zephyr RTOS shall have a defined behaviour when an invocation of an unimplemented system call is made.",
                            "USER_STORY": "As a Zephyr RTOS user I want Zephyr OS to indicate any unimplemented system call by an appropriate error message.",
                            "REVIEW_COMMENT": "What is an \"unimplemented system call\"? An empty system call function? Can I call something that is not there it all? Isn't this more a topic for security? - makes sense to handle this from the safety perspective, but still raises some questions here."
                        },
                        {
                            "_TOC": "9.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-73",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Response to invalid system call IDs",
                            "STATEMENT": "The Zephyr RTOS shall have a defined behaviour when an invalid system call ID is used.",
                            "USER_STORY": "As a Zephyr RTOS user I want Zephyr OS to indicate invalid system call by an appropriate error message."
                        },
                        {
                            "_TOC": "9.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-74",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Prevent user threads creating higher priority threads",
                            "STATEMENT": "The Zephyr RTOS shall prevent user threads from creating new threads that are higher priority than the caller."
                        },
                        {
                            "_TOC": "9.7",
                            "TYPE": "Functional",
                            "UID": "ZEP-75",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Revoking threads permissions on a kernel object",
                            "STATEMENT": "The Zephyr RTOS shall support revoking permission to a kernel object. User mode threads may only revoke their own access to an object.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be protected against other user threads changing access to kernel objects of my thread."
                        },
                        {
                            "_TOC": "9.8",
                            "TYPE": "Functional",
                            "UID": "ZEP-76",
                            "STATUS": "Draft",
                            "COMPONENT": "TBD: Memory Protection --> Thread",
                            "TITLE": "Prevent user threads creating supervisor threads",
                            "STATEMENT": "The Zephyr RTOS shall prevent user threads from creating kernel threads.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be protected against user threads creating higher privileged kernel/supervisor threads."
                        },
                        {
                            "_TOC": "9.9",
                            "TYPE": "Functional",
                            "UID": "ZEP-77",
                            "STATUS": "Draft",
                            "COMPONENT": "TBD: Memory Protection --> Thread",
                            "TITLE": "Reduced Privilege Level Threads",
                            "STATEMENT": "The Zephyr RTOS shall allow the creation of threads that run in reduced privilege level.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to create lower privileged threads than my own."
                        },
                        {
                            "_TOC": "9.10",
                            "TYPE": "Functional",
                            "UID": "ZEP-78",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "User Mode Threads Performing Privileged Operations",
                            "STATEMENT": "The Zephyr RTOS shall provide system calls to allow user mode threads to perform privileged operations.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to perform privileged operations in the kernel mode through a well defined interface."
                        },
                        {
                            "_TOC": "9.11",
                            "TYPE": "Functional",
                            "UID": "ZEP-79",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "User mode handling of detected stack overflow",
                            "STATEMENT": "The Zephyr RTOS shall support a defined mechanism for user mode handling a of detected stack overflow.",
                            "USER_STORY": "As a Zephyr RTOS user I want, when a stack overflow is detected, to be able to implement a graceful, application defined handling of the exception.",
                            "REVIEW_COMMENT": "Need for handlers and callbacks outside of thread.   Need to be able to answer \"Can the safety application rely on Zephyr to reach the safe state after stack overflow occurred?\"   Can it handle degraded mode."
                        },
                        {
                            "_TOC": "9.12",
                            "TYPE": "Functional",
                            "UID": "ZEP-80",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Stack Overflow Detection",
                            "STATEMENT": "The Zephyr RTOS shall support detection of stack overflows.",
                            "USER_STORY": "As a Zephyr RTOS user I want to get an indication when a stack overflow occurs at least during debugging / the development phase, and for safety applications also in a release version of my application.",
                            "REVIEW_COMMENT": "RS: IMHO should be configurable due the to performance penalty introduced with it.   - DL:  THere are various modes,  canaries, and they can be turned off.  KS:  Clearly safety & security mechanism."
                        },
                        {
                            "_TOC": "9.13",
                            "TYPE": "Functional",
                            "UID": "ZEP-81",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Boot Time Memory Access Policy",
                            "STATEMENT": "The Zephyr RTOS shall support configurable access to memory during boot time.",
                            "REVIEW_COMMENT": "What does \"policy\" mean in this context? Does this mean to choose between different start up sequences?"
                        },
                        {
                            "_TOC": "9.14",
                            "TYPE": "Functional",
                            "UID": "ZEP-82",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "System Call Handler Functions",
                            "STATEMENT": "The Zephyr RTOS shall provide helper functions for system call handler functions to validate the inputs passed in from user mode before invoking the implementation function to protect the kernel.",
                            "USER_STORY": "As a Zephyr RTOS user I want Zepyhr OS to validate system call parameters passed from the user mode to the kernel mode to avoid crashes and undefined behaviour.",
                            "REVIEW_COMMENT": "I do not understand that. What kind of helper functions? Kind of plausibility checks? Does it make sense to provide this functionality on OS level?   David:  These are likely just validation that the parameters are not going to be dangerous (security/safety)."
                        },
                        {
                            "_TOC": "9.15",
                            "TYPE": "Functional",
                            "UID": "ZEP-83",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "System Call C strings in user mode",
                            "STATEMENT": "The Zephyr RTOS shall support system calls to be able to safely accept C strings passed in from user mode.",
                            "USER_STORY": "As a Zephyr RTOS user I want Zepyhr OS to validate system call string type parameters passed from the user mode to the kernel mode to avoid crashes and undefined behaviour.\n\ne.g.\n\n- verify the string length is smaller or equal to the syscalls defined max.\n- verify that the length type does not overflow when allocating one more byte ???",
                            "REVIEW_COMMENT": "Is this a helper function like mentioned in ZEP133? What does C string mean here? Like a string variable that's passed down from user mode to ??? by a system call?"
                        },
                        {
                            "_TOC": "9.16",
                            "TYPE": "Functional",
                            "UID": "ZEP-84",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Tracking kernel objects in used by user mode threads",
                            "STATEMENT": "The Zephyr RTOS shall track kernel objects that are used by user mode threads.\n\nNote: this means Zephyr shall track the resources used by the user mode thread (associate this with a user story).",
                            "REVIEW_COMMENT": "Does this mean that the user mode threads are monitored wrt to their usage of kernel objects?  Example/User story would help."
                        },
                        {
                            "_TOC": "9.17",
                            "TYPE": "Functional",
                            "UID": "ZEP-85",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Granting threads access to specific memory",
                            "STATEMENT": "The Zephyr RTOS shall have an interface to request access to specific memory after initial allocation.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to request read-only or read-write access to a dedicated memory area/pool during runtime."
                        },
                        {
                            "_TOC": "9.18",
                            "TYPE": "Functional",
                            "UID": "ZEP-86",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Protection",
                            "TITLE": "Assigning memory pools to act as a thread resource pool",
                            "STATEMENT": "The Zephyr RTOS shall support assigning a memory pool to act as that thread's resource pool.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able, during runtime from the kernel, to request a memory area/pool which is exclusively available to the requesting thread protected against access from other threads.",
                            "REVIEW_COMMENT": "What is the difference to ZEP 136? Read & Write, while ZEP136 is just read?"
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "10",
                    "TYPE": "SECTION",
                    "TITLE": "Memory Objects",
                    "NODES": [
                        {
                            "_TOC": "10.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-87",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Objects",
                            "TITLE": "Dynamic Memory Allocation",
                            "STATEMENT": "The Zephyr RTOS shall allow threads to dynamically allocate variable-sized memory regions from a specified range of memory.",
                            "USER_STORY": "As a Zephyr RTOS user I want my application to be able to dynamically allocate memory of a application defined size.",
                            "REVIEW_COMMENT": "Is dynamic memory allocation only allowed in memory pool objects?"
                        },
                        {
                            "_TOC": "10.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-88",
                            "STATUS": "Draft",
                            "COMPONENT": "Memory Objects",
                            "TITLE": "Memory Slab Object",
                            "STATEMENT": "The Zephyr RTOS shall allow threads to dynamically allocate fixed-sized memory regions from a specified range of memory.",
                            "USER_STORY": "As a Zephyr RTOS user I want a most efficient and least fragmentation prone dynamic memory allocation mechanism."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "11",
                    "TYPE": "SECTION",
                    "TITLE": "Data Passing",
                    "NODES": [
                        {
                            "_TOC": "11.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-89",
                            "STATUS": "Draft",
                            "COMPONENT": "Data Passing",
                            "TITLE": "Traditional FIFO Queue",
                            "STATEMENT": "The Zephyr RTOS shall provide a kernel object that implements a traditional first in, first out (FIFO) queue, allowing threads and ISRs to add and remove a limited number of 32-bit data values.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to exchange 1 to N data objects between different threads and ISR in a thread-safe manner with a first-in-first-out (queue) behaviour."
                        },
                        {
                            "_TOC": "11.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-90",
                            "STATUS": "Draft",
                            "COMPONENT": "Data Passing",
                            "TITLE": "Traditional LIFO queue",
                            "STATEMENT": "The Zephyr RTOS shall provide a kernel object that implements a traditional last in, first out (LIFO) queue, allowing threads and ISRs to add and remove a limited number of 32-bit data values.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to exchange 1 to N data objects between different threads and ISR in a thread-safe manner with a last-in-first-out (stack) behaviour."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "12",
                    "TYPE": "SECTION",
                    "TITLE": "Semaphores",
                    "NODES": [
                        {
                            "_TOC": "12.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-001",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Counting Semaphore Definition At Compile Time",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism to define and initialize a semaphore at compile time.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-002",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Counting Semaphore Definition At Run Time",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism to define and initialize a semaphore at runtime.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-003",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Maximum limit of a semaphore",
                            "STATEMENT": "The Zephyr RTOS shall define the maximum limit of a semaphore when the semaphore is used for counting purposes and does not have an explicit limit."
                        },
                        {
                            "_TOC": "12.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-004",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Initialialization with maximum count value",
                            "STATEMENT": "When initializing a counting semaphore, the maximum permitted count a semaphore\ncan have shall be set.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-005",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Initialialization with initial semaphore value",
                            "STATEMENT": "When initializing a counting semaphore, the initial semaphore value shall be set.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-006",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore acquisition",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism allowing threads to acquire a semaphore.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.7",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-007",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore acquisition",
                            "STATEMENT": "If the semaphore's count is greater than zero, the requesting thread shall acquire\nthe semaphore and decrement its count.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.8",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-008",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore acquisition",
                            "STATEMENT": "If the semaphore's count is zero, the requesting thread shall be blocked until the semaphore is released by another thread.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.9",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-009",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore acquisition timeout",
                            "STATEMENT": "When attempting to acquire a semaphore, the Zephyr RTOS shall accept options that specify timeout periods, allowing threads to set a maximum wait time for semaphore acquisition.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.10",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-010",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore acquisition timeout error handling",
                            "STATEMENT": "When attempting to acquire a semaphore, where the semaphore is not acquired within the\nspecified time, the Zephyr RTOS shall return an error indicating a timeout.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.11",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-011",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore acquisition no wait error handling",
                            "STATEMENT": "When attempting to acquire a semaphore, where the current count is zero and no waiting time was provided, the Zephyr RTOS\nshall return an error indicating the semaphore is busy.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.12",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-012",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore release",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism allowing threads to release a semaphore.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.13",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-013",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore release",
                            "STATEMENT": "The Zephyr RTOS shall increment the semaphore's count upon release.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.14",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-014",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore release",
                            "STATEMENT": "If there are threads waiting on the semaphore, the highest-priority waiting thread\nshall be unblocked and acquire the semaphore.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.15",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-030",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Semaphore Initialization Option Validation",
                            "STATEMENT": "When initializing a counting semaphore, where the maximum permitted count of a semaphore is invalid,\nthe Zephyr RTOS shall return an error indicating invalid values.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.16",
                            "TYPE": "Functional",
                            "UID": "ZEP-SEMAPHORE-015",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Checking semaphore count",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism for threads to check the current count of a semaphore without acquiring it.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.17",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-016",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Efficiency",
                            "STATEMENT": "Semaphore operations shall be implemented efficiently to minimize overhead and maximize system performance."
                        },
                        {
                            "_TOC": "12.18",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-022",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Scalability",
                            "STATEMENT": "The Zephyr RTOS shall support a large number of semaphores without significant degradation in performance."
                        },
                        {
                            "_TOC": "12.19",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-017",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Robustness",
                            "STATEMENT": "The Zephyr RTOS shall handle edge cases such as invalid semaphore handles or\nattempts to release an unacquired semaphore gracefully."
                        },
                        {
                            "_TOC": "12.20",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-021",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Error handling mechanisms",
                            "STATEMENT": "Error handling mechanisms shall be in place to prevent system instability due to misuse of semaphore operations.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        },
                        {
                            "_TOC": "12.21",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-018",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Portability",
                            "STATEMENT": "Semaphore operations shall be implemented in a platform-independent manner to\nensure portability across different hardware and software environments."
                        },
                        {
                            "_TOC": "12.22",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-019",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Concurrency",
                            "STATEMENT": "Semaphore operations shall be thread-safe to support concurrent execution of\nmultiple threads."
                        },
                        {
                            "_TOC": "12.23",
                            "TYPE": "Non-Functional",
                            "UID": "ZEP-SEMAPHORE-020",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Synchronization Mechanisms",
                            "STATEMENT": "The system shall use appropriate synchronization mechanisms to prevent race conditions and ensure consistent behavior in multi-threaded environments.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-99"
                                }
                            ]
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "13",
                    "TYPE": "SECTION",
                    "TITLE": "Mutex",
                    "NODES": [
                        {
                            "_TOC": "13.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-91",
                            "STATUS": "Draft",
                            "COMPONENT": "Mutex",
                            "TITLE": "Mutex Kernel Object",
                            "STATEMENT": "The Zephyr RTOS shall support resource synchronization. (Note synchronization can be for memory access, and mutex may be one implementation, but not the only one).",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to sychonize threads when accessing common resources, where the thread shall have the option to:\n- wait eternally until the resources becomes available.\n- immediately return with a negative message if the resource is not available and allow the thread to continue.\n- wait for a given time for the resource to become available or return with a negative message.",
                            "REVIEW_COMMENT": "Concern over phrase recursive.  What is it MUTEXing? Memory Management?"
                        }
                    ]
                },
                {
                    "_TOC": "14",
                    "TYPE": "SECTION",
                    "TITLE": "Power Management",
                    "NODES": [
                        {
                            "_TOC": "14.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-92",
                            "STATUS": "Draft",
                            "COMPONENT": "Power Management",
                            "TITLE": "Power State Control",
                            "STATEMENT": "The Zephyr RTOS shall provide control over changes to system power states.",
                            "USER_STORY": "See ZEP104\n+\nWhen the power state is changed I want to get an notification in order for specific parts of my application to react accordingly."
                        },
                        {
                            "_TOC": "14.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-93",
                            "STATUS": "Draft",
                            "COMPONENT": "Power Management",
                            "TITLE": "Power Management - TBD",
                            "STATEMENT": "TBD"
                        },
                        {
                            "_TOC": "14.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-94",
                            "STATUS": "Draft",
                            "COMPONENT": "Power Management",
                            "TITLE": "Notification of changes to system power states",
                            "STATEMENT": "The Zephyr RTOS shall provide notification of changes to system power states."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "15",
                    "TYPE": "SECTION",
                    "TITLE": "Thread Communication",
                    "NODES": [
                        {
                            "_TOC": "15.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-96",
                            "STATUS": "Draft",
                            "COMPONENT": "Thread Communication",
                            "TITLE": "Exchanging data between threads",
                            "STATEMENT": "The Zephyr RTOS shall provide a mechanism for exchanging data between threads.",
                            "USER_STORY": "(Note: copying data may be needed here - what is Zephyr doing? is it configurable?)"
                        },
                        {
                            "_TOC": "15.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-97",
                            "STATUS": "Draft",
                            "COMPONENT": "Thread Communication",
                            "TITLE": "Waiting for results during communication",
                            "STATEMENT": "The Zephyr RTOS shall provide mechanisms to enable waiting for results during communication between threads. (NOTE:  waiting for results is really bad and dangerous, want to avoid if at all possible).",
                            "USER_STORY": "=N73"
                        },
                        {
                            "_TOC": "15.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-100",
                            "STATUS": "Draft",
                            "COMPONENT": "Thread Communication",
                            "TITLE": "Poll Operation Support",
                            "STATEMENT": "The Zephyr RTOS shall support a poll operation which enables waiting concurrently for any one of multiple conditions to be fulfilled.",
                            "USER_STORY": "As a Zephyr RTOS user I want my thread to wait for one of several defined events to occur and only continue when one of them has occurred."
                        },
                        {
                            "_TOC": "15.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-101",
                            "STATUS": "Draft",
                            "COMPONENT": "Thread Communication",
                            "TITLE": "Pipe Communication Primitive",
                            "STATEMENT": "The Zephyr RTOS shall provide a communication primitive that allows a thread to transfer a block of\ndata to another thread.",
                            "USER_STORY": "As a Zephyr RTOS user I want to send a byte stream from one thread to another in a thread-safe manner."
                        },
                        {
                            "_TOC": "15.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-102",
                            "STATUS": "Draft",
                            "COMPONENT": "Thread Communication",
                            "TITLE": "Message Queue",
                            "STATEMENT": "The Zephyr RTOS shall provide a a communication primitive that allow threads and ISRs to asynchronously exchange fixed-size data items."
                        },
                        {
                            "_TOC": "15.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-103",
                            "STATUS": "Draft",
                            "COMPONENT": "Thread Communication",
                            "TITLE": "Mailbox Kernel Primitive",
                            "STATEMENT": "The Zephyr RTOS shall provide a communication primitive that allows threads to exchange messages of varying sizes asynchronously or synchronously.",
                            "USER_STORY": "As a Zephyr RTOS user I want a sending thread to deposit a message into the mailbox,\nand a receiving thread to be able to retrieve the message at its convenience. This\nallows for asynchronous communication, where threads do not need to synchronize their\nexecution explicitly."
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "16",
                    "TYPE": "SECTION",
                    "TITLE": "Thread Scheduling",
                    "NODES": [
                        {
                            "_TOC": "16.1",
                            "TYPE": "SECTION",
                            "TITLE": "Thread Scheduling",
                            "NODES": [
                                {
                                    "_TOC": "16.1.1",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-104",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Multi Core",
                                    "TITLE": "Support operation on more than one CPU",
                                    "STATEMENT": "The Zephyr RTOS shall support operation on more than one physical CPU sharing the same kernel state."
                                },
                                {
                                    "_TOC": "16.1.2",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-105",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Multi Core",
                                    "TITLE": "Running threads on specific CPUs",
                                    "STATEMENT": "The Zephyr RTOS shall provide an interface for running threads on specific sets of CPUs ( default is 1 CPU).",
                                    "USER_STORY": "As a Zephyr RTOS user I want Zephyr OS to be able to specify the CPU core or the set of CPU cores on which a thread shall be executed."
                                },
                                {
                                    "_TOC": "16.1.3",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-106",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Multi Core",
                                    "TITLE": "Exclusion between physical CPUs",
                                    "STATEMENT": "The Zephyr RTOS shall provide an interface for mutual exclusion between multiple physical CPUs.",
                                    "USER_STORY": "As a Zephyr RTOS user I want Zephyr OS to provide synchronization mechanisms between the CPU cores and the access to common resources."
                                }
                            ]
                        },
                        {
                            "_TOC": "16.2",
                            "TYPE": "SECTION",
                            "TITLE": "Thread Scheduling",
                            "NODES": [
                                {
                                    "_TOC": "16.2.1",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-112",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Scheduling a thread based on an event",
                                    "STATEMENT": "The Zephyr RTOS shall provide an interface to schedule a thread based on an event.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to execute work which reacts on events and interrupts the current executed work.",
                                    "RELATIONS": [
                                        {
                                            "TYPE": "Parent",
                                            "VALUE": "ZEP-123"
                                        }
                                    ]
                                },
                                {
                                    "_TOC": "16.2.2",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-114",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Deadline Scheduling Priorities",
                                    "STATEMENT": "The Zephyr RTOS shall organize running threads by earliest deadline first priority.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to schedule threads by earliest deadline first."
                                },
                                {
                                    "_TOC": "16.2.3",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-115",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Work Queue utility capable of running preemptible work items",
                                    "STATEMENT": "The Zephyr RTOS shall provide a thread-pooled work queue utility capable of running preemptible work items with specific scheduler priorities.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to add work items in a thread work queue with different priorities and these shall be scheduled according their priorities."
                                },
                                {
                                    "_TOC": "16.2.4",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-24",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Run user supplied functions in-order in a separate thread(s)",
                                    "STATEMENT": "The Zephyr RTOS shall provide an interface for running user-supplied functions.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to run functions in-order in a separated thread/threads.",
                                    "REVIEW_COMMENT": "Where do we put this,  thread, scheduling or???"
                                },
                                {
                                    "_TOC": "16.2.5",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-116",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Organize running threads into a fixed list",
                                    "STATEMENT": "The Zephyr RTOS shall organize running threads into a fixed list of numeric priorities.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want that the OS organize running threads in a fixed list of numeric priorities.",
                                    "REVIEW_COMMENT": "The Zephyr RTOS shall allow prioritizing threads"
                                },
                                {
                                    "_TOC": "16.2.6",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-117",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Preemption support",
                                    "STATEMENT": "The Zephyr RTOS shall support preemption of a running thread by a higher priority thread.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want that the OS preempt running threads by a thread with higher priority."
                                },
                                {
                                    "_TOC": "16.2.7",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-118",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Un-preemptible thread priorities",
                                    "STATEMENT": "The Zephyr RTOS shall support thread priorities which cannot be preempted by other user threads.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to configure thread prioritizes which cannot be preempted by other user threads."
                                },
                                {
                                    "_TOC": "16.2.8",
                                    "TYPE": "Functional",
                                    "UID": "ZEP-119",
                                    "STATUS": "Draft",
                                    "COMPONENT": "Thread Scheduling",
                                    "TITLE": "Time sharing of CPU resources",
                                    "STATEMENT": "The Zephyr RTOS shall support time sharing of CPU resources among threads of the same priority.",
                                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to configure my RTOS in the way, that the CPU resources are shared evenly among executed threads of the same priority.",
                                    "REVIEW_COMMENT": "what does traditional mean here?   Round robin?"
                                }
                            ]
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "17",
                    "TYPE": "SECTION",
                    "TITLE": "Threads",
                    "NODES": [
                        {
                            "_TOC": "17.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-23",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Creating threads",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to create (start) a thread.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-107",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Setting thread priority",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to set a thread's priority.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-122"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-108",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Suspending a thread",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to suspend a thread.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-109",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Resuming a suspended thread",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to resume a suspended thread.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-110",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Resuming a suspended thread after a timeout",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to resume a suspended thread after a timeout.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-111",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Deleting a thread",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to delete (end) a thread.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.7",
                            "TYPE": "Functional",
                            "UID": "ZEP-124",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread states",
                            "STATEMENT": "Threads shall have different states to fulfill the Life-cycle of a thread",
                            "USER_STORY": "As a Zephyr RTOS user, I want to know in what state a specific thread is.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.8",
                            "TYPE": "Functional",
                            "UID": "ZEP-98",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread stack objects",
                            "STATEMENT": "Every Thread shall have it's own stack.",
                            "USER_STORY": "As a Zephyr RTOS user I want to be able to configure the stack size of a thread. And every thread shall have it's own dedicated stack.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.9",
                            "TYPE": "Functional",
                            "UID": "ZEP-25",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread privileges",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to create threads with defined privilege.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.10",
                            "TYPE": "Functional",
                            "UID": "ZEP-26",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Scheduling multiple threads",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to schedule multiple threads.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.11",
                            "TYPE": "Functional",
                            "UID": "ZEP-125",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread Options",
                            "STATEMENT": "The Zephyr RTOS shall support a set of thread options.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to pass specific option to a thread.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        },
                        {
                            "_TOC": "17.12",
                            "TYPE": "Functional",
                            "UID": "ZEP-126",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread Custom Data",
                            "STATEMENT": "Every thread shall have a custom data area.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to set a thread specific custom area for every thread I create and which can be used only by the thread itself or the can be used by the application",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-123"
                                },
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-5"
                                }
                            ]
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "18",
                    "TYPE": "SECTION",
                    "TITLE": "Timers",
                    "NODES": [
                        {
                            "_TOC": "18.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-27",
                            "STATUS": "Draft",
                            "COMPONENT": "Timers",
                            "TITLE": "Kernel Clock",
                            "STATEMENT": "The Zephyr RTOS shall provide a interface for checking the current value of the real-time clock.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to track the passed real time in the OS with a dedicated hardware counter and interrupt.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-6"
                                }
                            ]
                        },
                        {
                            "_TOC": "18.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-28",
                            "STATUS": "Draft",
                            "COMPONENT": "Timers",
                            "TITLE": "Call functions in interrupt context",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to schedule user mode call back function triggered by a real time clock value.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to execute functions in the interrupt context and the interrupt context shall be base on a real-time counter.",
                            "RELATIONS": [
                                {
                                    "TYPE": "Parent",
                                    "VALUE": "ZEP-6"
                                }
                            ]
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                },
                {
                    "_TOC": "19",
                    "TYPE": "SECTION",
                    "TITLE": "Tracing",
                    "NODES": [
                        {
                            "_TOC": "19.1",
                            "TYPE": "Functional",
                            "UID": "ZEP-29",
                            "STATUS": "Draft",
                            "COMPONENT": "Tracing",
                            "TITLE": "Initializing a trace",
                            "STATEMENT": "Zephyr shall provide an interface to initialize a trace."
                        },
                        {
                            "_TOC": "19.2",
                            "TYPE": "Functional",
                            "UID": "ZEP-30",
                            "STATUS": "Draft",
                            "COMPONENT": "Tracing",
                            "TITLE": "Triggering a trace",
                            "STATEMENT": "Zephyr shall provide an interface to trigger a trace."
                        },
                        {
                            "_TOC": "19.3",
                            "TYPE": "Functional",
                            "UID": "ZEP-31",
                            "STATUS": "Draft",
                            "COMPONENT": "Tracing",
                            "TITLE": "Dumping trace results",
                            "STATEMENT": "Zephyr shall provide an interface to dump results from a trace."
                        },
                        {
                            "_TOC": "19.4",
                            "TYPE": "Functional",
                            "UID": "ZEP-32",
                            "STATUS": "Draft",
                            "COMPONENT": "Tracing",
                            "TITLE": "Removing trace data",
                            "STATEMENT": "Zephyr shall provide an interface to remove trace data."
                        },
                        {
                            "_TOC": "19.5",
                            "TYPE": "Functional",
                            "UID": "ZEP-33",
                            "STATUS": "Draft",
                            "COMPONENT": "Tracing",
                            "TITLE": "Tracing Object  Identification",
                            "STATEMENT": "Zephyr shall provide an interface to identify the objects being traced.",
                            "USER_STORY": "As a Zepyhr OS user, I want to be able to give each object which I create a name / label in order to be able to identify them in a trace log.",
                            "REVIEW_COMMENT": "What objects?   hardware devices, code, ...."
                        },
                        {
                            "_TOC": "19.6",
                            "TYPE": "Functional",
                            "UID": "ZEP-34",
                            "STATUS": "Draft",
                            "COMPONENT": "Tracing",
                            "TITLE": "Tracing Non-Interference",
                            "STATEMENT": "Zepyhr shall prevent the tracing functionality from interfering with normal operations.",
                            "USER_STORY": "As a Zepyhr OS user, I want that the trace functionality do not interfere or slow down the operation system functionality.",
                            "REVIEW_COMMENT": "What are \"normal\" operations? Might make sense to rephrase this to \"any other operation\""
                        }
                    ],
                    "REQ_PREFIX": "ZEP-"
                }
            ]
        },
        {
            "TITLE": "Zephyr System Requirements",
            "REQ_PREFIX": "ZEP-",
            "GRAMMAR": {
                "ELEMENTS": [
                    {
                        "NODE_TYPE": "REQUIREMENT",
                        "FIELDS": [
                            {
                                "TITLE": "UID",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "STATUS",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "TYPE",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "COMPONENT",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "TITLE",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "STATEMENT",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "USER_STORY",
                                "REQUIRED": false,
                                "TYPE": "String"
                            },
                            {
                                "TITLE": "REVIEW_COMMENT",
                                "REQUIRED": false,
                                "TYPE": "String"
                            }
                        ],
                        "RELATIONS": [
                            {
                                "TYPE": "Parent"
                            }
                        ]
                    }
                ]
            },
            "_OPTIONS": {},
            "NODES": [
                {
                    "_TOC": "1",
                    "TYPE": "High Level",
                    "UID": "ZEP-1",
                    "STATUS": "Draft",
                    "COMPONENT": "Hardware Architecture Interface",
                    "TITLE": "Architecture Layer Interface",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework to communicate with a set of hardware architectural services.",
                    "USER_STORY": "As a Zephyr RTOS user I want to be able to easily switch my application to a different MCU architecture (x86, ARM Cortex-M/A, RISCV etc.)."
                },
                {
                    "_TOC": "2",
                    "TYPE": "High Level",
                    "UID": "ZEP-3",
                    "STATUS": "Draft",
                    "COMPONENT": "Hardware Architecture Interface",
                    "TITLE": "Support multiprocessor management",
                    "STATEMENT": "The Zephyr RTOS shall support symmetric multiprocessing on multiple cores.",
                    "USER_STORY": "As a Zephyr RTOS user I want to use Zephyr OS on multi core (SMP-)MCUs/MPUs.",
                    "REVIEW_COMMENT": "From the Docs: No special application code needs to be written to take advantage of this feature",
                    "RELATIONS": [
                        {
                            "TYPE": "Parent",
                            "VALUE": "ZEP-1"
                        }
                    ]
                },
                {
                    "_TOC": "3",
                    "TYPE": "High Level",
                    "UID": "ZEP-2",
                    "STATUS": "Draft",
                    "COMPONENT": "C Library",
                    "TITLE": "Support Subset of Standard C Library",
                    "STATEMENT": "The Zephyr RTOS shall support a subset of the standard C library.",
                    "USER_STORY": "As a Zephyr RTOS user I want to have a selection of standard C library implementations e.g. a full extend and a minimal with a smaller footprint or a particular fast executing implementation.",
                    "REVIEW_COMMENT": "Can we limit the type of C library implementations? Testing might be hell if we do not limit ourselves to the ones defined? Like \"minimal libc\" and \"newlib\". Will it make sense to pull minimal Libc into the certification scope?\n\nClarification: Would prefer to cover the scope part first. Talking about the hooks which apply to each C Library. Open, Close, Diff. Hooks that are OS dependent. C or Library dependent. ref https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/newlib/libc-hooks.c\n\nTBD: The requirement needs refinement."
                },
                {
                    "_TOC": "4",
                    "TYPE": "High Level",
                    "UID": "ZEP-36",
                    "STATUS": "Draft",
                    "COMPONENT": "Device Drivers",
                    "TITLE": "Device Driver Abstraction",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework for managing device drivers and peripherals.",
                    "USER_STORY": "As a Zephyr RTOS user I want my application to be portable between different MCU architectures (ARM Cortex-M/A, Intel x86, RISCV etc.) and MCU vendors (STM, NXP, Intel, etc.) without having to change the MCU peripherals access.",
                    "REVIEW_COMMENT": "TBD: Title seems to need refinement. Also, this requirement's user story seems to be identical to that of ZEP-1."
                },
                {
                    "_TOC": "5",
                    "TYPE": "High Level",
                    "UID": "ZEP-37",
                    "STATUS": "Draft",
                    "COMPONENT": "Exception and Error Handling",
                    "TITLE": "Fatal error and exception handling",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework for error and exception handling.",
                    "USER_STORY": "As a Zephyr RTOS user I want errors and exceptions to handled and react according to my applications requirements (e.g. reach/establish the applications safety state)."
                },
                {
                    "_TOC": "6",
                    "TYPE": "High Level",
                    "UID": "ZEP-38",
                    "STATUS": "Draft",
                    "COMPONENT": "File Systems",
                    "TITLE": "Common File system operation support",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework for managing file system access.",
                    "USER_STORY": "As a Zephyr RTOS user I want a posix / c like file system access to store data."
                },
                {
                    "_TOC": "7",
                    "TYPE": "High Level",
                    "UID": "ZEP-39",
                    "STATUS": "Draft",
                    "COMPONENT": "Interrupts",
                    "TITLE": "Interrupt Service Routine",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework for interrupt management.",
                    "USER_STORY": "As a Zephyr RTOS user I want interrupts to be handled synchronously in response to a hardware or software interrupt request with a minimum latency, preempting threads and, as far as the hardware allows, lower priority interrupt service routines."
                },
                {
                    "_TOC": "8",
                    "TYPE": "High Level",
                    "UID": "ZEP-40",
                    "STATUS": "Draft",
                    "COMPONENT": "Logging",
                    "TITLE": "Logging",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework for logging events.",
                    "USER_STORY": "As a Zephyr RTOS user I want to be able to log application defined events as well as framework exceptions.",
                    "REVIEW_COMMENT": "Nicole: TBD: we need to have logging in the safety scope?"
                },
                {
                    "_TOC": "9",
                    "TYPE": "High Level",
                    "UID": "ZEP-41",
                    "STATUS": "Draft",
                    "COMPONENT": "Memory Management",
                    "TITLE": "Memory Management framework",
                    "STATEMENT": "The Zephyr RTOS shall support a memory management framework.",
                    "USER_STORY": "As a Zephyr RTOS user I want memory to be allocated and protected to my application threads preventing mistakenly access to foreign memory as far as the hardware allows."
                },
                {
                    "_TOC": "10",
                    "TYPE": "High Level",
                    "UID": "ZEP-42",
                    "STATUS": "Draft",
                    "COMPONENT": "Power Management",
                    "TITLE": "Power Management",
                    "STATEMENT": "The Zephyr RTOS shall provide an interface to control hardware power states.",
                    "USER_STORY": "As a Zephyr RTOS user I want to be able to control the power mode of the MCU and its peripherals to take advantage of the hardware features and to be able to implement low power or battery driven long life applications."
                },
                {
                    "_TOC": "11",
                    "TYPE": "SECTION",
                    "TITLE": "Multi core and SMP",
                    "NODES": [
                        {
                            "_TOC": "11.1",
                            "TYPE": "High Level",
                            "UID": "ZEP-44",
                            "STATUS": "Draft",
                            "COMPONENT": "SMP and Multi core",
                            "TITLE": "Multiple CPU scheduling",
                            "STATEMENT": "The Zephyr RTOS shall support scheduling of threads on multiple hardware CPUs.",
                            "USER_STORY": "As a Zephyr RTOS user I want Zephyr OS to run on MCUs/CPUs with one or more CPU cores."
                        },
                        {
                            "_TOC": "11.2",
                            "TYPE": "High Level",
                            "UID": "ZEP-4",
                            "STATUS": "Draft",
                            "COMPONENT": "SMP and Multi core",
                            "TITLE": "Scheduling",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface to assign a thread to a specific CPU.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to control which thread will run on which CPU."
                        }
                    ]
                },
                {
                    "_TOC": "12",
                    "TYPE": "SECTION",
                    "TITLE": "Thread Synchronization",
                    "NODES": [
                        {
                            "_TOC": "12.1",
                            "TYPE": "High Level",
                            "UID": "ZEP-43",
                            "STATUS": "Draft",
                            "COMPONENT": "Mutex",
                            "TITLE": "Mutex",
                            "STATEMENT": "The Zephyr RTOS shall provide an interface for managing communication between threads.",
                            "USER_STORY": "As a Zephyr RTOS user I want to able to exchange information between threads in a thread-safe manner guaranteeing data consistence."
                        },
                        {
                            "_TOC": "12.2",
                            "TYPE": "High Level",
                            "UID": "ZEP-99",
                            "STATUS": "Draft",
                            "COMPONENT": "Semaphore",
                            "TITLE": "Counting Semaphore",
                            "STATEMENT": "The system shall implement a semaphore synchronization primitive for coordinating access to shared resources among multiple threads.",
                            "USER_STORY": "As a software developer threaded with implementing resource management in our real-time operating system (RTOS), I want to integrate a semaphore synchronization primitive to facilitate coordinated access to shared resources among multiple threads."
                        }
                    ]
                },
                {
                    "_TOC": "13",
                    "TYPE": "SECTION",
                    "TITLE": "Threads",
                    "NODES": [
                        {
                            "_TOC": "13.1",
                            "TYPE": "High Level",
                            "UID": "ZEP-123",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread support",
                            "STATEMENT": "The Zephyr RTOS shall support threads.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to have support for the kernel objects named threads for processing work."
                        },
                        {
                            "_TOC": "13.2",
                            "TYPE": "High Level",
                            "UID": "ZEP-5",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread management",
                            "STATEMENT": "The Zephyr RTOS shall provide a framework for managing multiple threads of execution.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to manage the execute of multiple threads with different priorities.",
                            "REVIEW_COMMENT": "TBD: Nothing about priorities..."
                        },
                        {
                            "_TOC": "13.3",
                            "TYPE": "High Level",
                            "UID": "ZEP-122",
                            "STATUS": "Draft",
                            "COMPONENT": "Threads",
                            "TITLE": "Thread priority",
                            "STATEMENT": "Threads shall have a priority.",
                            "USER_STORY": "As a Zephyr RTOS user, I want to be able to give my threads different priorities for execution."
                        }
                    ]
                },
                {
                    "_TOC": "14",
                    "TYPE": "High Level",
                    "UID": "ZEP-6",
                    "STATUS": "Draft",
                    "COMPONENT": "Timers",
                    "TITLE": "Timers",
                    "STATEMENT": "The Zephyr RTOS shall provide a framework for managing time-based events.",
                    "USER_STORY": "As a Zephyr RTOS user, I want to start, suspend, resume and stop timers which shall trigger an event on a set expiration time."
                },
                {
                    "_TOC": "15",
                    "TYPE": "High Level",
                    "UID": "ZEP-7",
                    "STATUS": "Draft",
                    "COMPONENT": "Tracing",
                    "TITLE": "Tracing",
                    "STATEMENT": "Zepyhr shall provide a framework mechanism for tracing low level system operations  (NOTE: system calls, interrupts, kernel calls, thread, synchronization, etc.).",
                    "USER_STORY": "As a Zephyr RTOS user, I want to be able to trace different OS operations.",
                    "REVIEW_COMMENT": "TBD: What are low level system operations in this context?"
                }
            ]
        }
    ]
}